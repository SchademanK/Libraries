ImageRuntimeVersion: v4.0.30319
Assembly KClmtrWrapper, Version=2.75.*, Culture=Invariant Language (Invariant Country): 
	hash=SHA1, flags=PublicKey
Assembly mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089: 
	hash=None, flags=None
Assembly System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089: 
	hash=None, flags=None
Assembly System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089: 
	hash=None, flags=None
Assembly System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089: 
	hash=None, flags=None
Class KClmtrBase.KleinsErrorCodes: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Fields:
    UInt32 NONE IsConst : Public, Static, HasDefault
    UInt32 NOT_OPEN IsConst : Public, Static, HasDefault
    UInt32 TIMED_OUT IsConst : Public, Static, HasDefault
    UInt32 LOST_CONNECTION IsConst : Public, Static, HasDefault
    UInt32 BAD_VALUES IsConst : Public, Static, HasDefault
    UInt32 CONVERTED_NM IsConst : Public, Static, HasDefault
    UInt32 KELVINS IsConst : Public, Static, HasDefault
    UInt32 AIMING_LIGHTS IsConst : Public, Static, HasDefault
    UInt32 AVERAGING_LOW_LIGHT IsConst : Public, Static, HasDefault
    UInt32 BOTTOM_UNDER_RANGE IsConst : Public, Static, HasDefault
    UInt32 TOP_OVER_RANGE IsConst : Public, Static, HasDefault
    UInt32 OVER_HIGH_RANGE IsConst : Public, Static, HasDefault
    UInt32 BLACK_ZERO IsConst : Public, Static, HasDefault
    UInt32 BLACK_OVERDRIVE IsConst : Public, Static, HasDefault
    UInt32 BLACK_EXCESSIVE IsConst : Public, Static, HasDefault
    UInt32 BLACK_PARSING_ROM IsConst : Public, Static, HasDefault
    UInt32 BLACK_STORING_ROM IsConst : Public, Static, HasDefault
    UInt32 CAL_WHITE_RGB IsConst : Public, Static, HasDefault
    UInt32 CAL_STORING IsConst : Public, Static, HasDefault
    UInt32 CAL_CONVERT_BINARY IsConst : Public, Static, HasDefault
    UInt32 FFT_BAD_STRING IsConst : Public, Static, HasDefault
    UInt32 FFT_RANGE_CAL IsConst : Public, Static, HasDefault
    UInt32 FFT_NO_XYZ IsConst : Public, Static, HasDefault
    UInt32 FFT_NO_RANGE IsConst : Public, Static, HasDefault
    UInt32 FFT_INSUFFICIENT_DATA IsConst : Public, Static, HasDefault
    UInt32 FFT_PREVIOUS_RANGE IsConst : Public, Static, HasDefault
    UInt32 FFT_NOT_SUPPORTED IsConst : Public, Static, HasDefault
    UInt32 FFT_BAD_SAMPLES IsConst : Public, Static, HasDefault
    UInt32 FFT_OVER_SATURATED IsConst : Public, Static, HasDefault
    UInt32 FIRMWARE IsConst : Public, Static, HasDefault
    UInt32 NEGATIVE_VALUES IsConst : Public, Static, HasDefault
    UInt32 ingoreWarningList IsConst : Public, Static
  Methods:
    errorCodesToString(UInt32, UInt32): PrivateScope, Public, Static, HideBySig
    errorCodesToString(UInt32): PrivateScope, Public, Static, HideBySig
    shouldStopMeasuring(UInt32, UInt32): PrivateScope, Public, Static, HideBySig
    shouldStopMeasuring(UInt32): PrivateScope, Public, Static, HideBySig
    getErrorCodeFromKlein(basic_string<char\,std::char_traits<char>\,std::allocator<char> >*): PrivateScope, Public, Static, HideBySig
Struct KClmtrBase.PercentMode: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    KClmtrBase.PercentMode ContrastMethod = 0 : Public, Static, Literal, HasDefault
    KClmtrBase.PercentMode Normaized = 1 : Public, Static, Literal, HasDefault
Struct KClmtrBase.DecibelMode: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    KClmtrBase.DecibelMode VESA = 0 : Public, Static, Literal, HasDefault
    KClmtrBase.DecibelMode JEITA = 1 : Public, Static, Literal, HasDefault
Struct KClmtrBase.CorrectionMode: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    KClmtrBase.CorrectionMode ArrayFit = 0 : Public, Static, Literal, HasDefault
    KClmtrBase.CorrectionMode PolyFit = 1 : Public, Static, Literal, HasDefault
Struct KClmtrBase.MeasurementRange: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    KClmtrBase.MeasurementRange range1 = 1 : Public, Static, Literal, HasDefault
    KClmtrBase.MeasurementRange range2 = 2 : Public, Static, Literal, HasDefault
    KClmtrBase.MeasurementRange range3 = 3 : Public, Static, Literal, HasDefault
    KClmtrBase.MeasurementRange range4 = 4 : Public, Static, Literal, HasDefault
    KClmtrBase.MeasurementRange range5 = 5 : Public, Static, Literal, HasDefault
    KClmtrBase.MeasurementRange range6 = 6 : Public, Static, Literal, HasDefault
    KClmtrBase.MeasurementRange range1B = 1 : Public, Static, Literal, HasDefault
    KClmtrBase.MeasurementRange range1T = 2 : Public, Static, Literal, HasDefault
    KClmtrBase.MeasurementRange range2B = 3 : Public, Static, Literal, HasDefault
    KClmtrBase.MeasurementRange range2T = 4 : Public, Static, Literal, HasDefault
    KClmtrBase.MeasurementRange range3B = 5 : Public, Static, Literal, HasDefault
    KClmtrBase.MeasurementRange range3T = 6 : Public, Static, Literal, HasDefault
Struct KClmtrBase.GamutCode: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    KClmtrBase.GamutCode NTSC = 0 : Public, Static, Literal, HasDefault
    KClmtrBase.GamutCode EBU = 1 : Public, Static, Literal, HasDefault
    KClmtrBase.GamutCode REC709 = 2 : Public, Static, Literal, HasDefault
    KClmtrBase.GamutCode REC2020 = 3 : Public, Static, Literal, HasDefault
    KClmtrBase.GamutCode SMPTE = 4 : Public, Static, Literal, HasDefault
    KClmtrBase.GamutCode DCIP3 = 5 : Public, Static, Literal, HasDefault
    KClmtrBase.GamutCode USER_DEFINE = 6 : Public, Static, Literal, HasDefault
    KClmtrBase.GamutCode defaultGamut = 2 : Public, Static, Literal, HasDefault
Struct KClmtrBase.SpeedMode: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    KClmtrBase.SpeedMode SPEEDMODE_SLOWEST = 0 : Public, Static, Literal, HasDefault
    KClmtrBase.SpeedMode SPEEDMODE_SLOW = 1 : Public, Static, Literal, HasDefault
    KClmtrBase.SpeedMode SPEEDMODE_NORMAL = 2 : Public, Static, Literal, HasDefault
    KClmtrBase.SpeedMode SPEEDMODE_FAST = 3 : Public, Static, Literal, HasDefault
Class KClmtrBase.KClmtrWrapper.wMatrixDouble: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(UInt32, UInt32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(KClmtrBase.KClmtrNative.Matrix<double>*): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Double Item [Int32, Int32] 'get set' : 
    Double[,] v 'get set' : 
    UInt32 Column 'get ' : 
    UInt32 Row 'get ' : 
  Methods:
    get_Row(): PrivateScope, Public, HideBySig, SpecialName
    get_Column(): PrivateScope, Public, HideBySig, SpecialName
    get_v(): PrivateScope, Public, HideBySig, SpecialName
    set_v(Double[,]): PrivateScope, Public, HideBySig, SpecialName
    get_Item(Int32, Int32): PrivateScope, Public, HideBySig, SpecialName
    set_Item(Int32, Int32, Double): PrivateScope, Public, HideBySig, SpecialName
    initializeV(UInt32, UInt32): PrivateScope, Public, HideBySig
    getNative(Matrix<double>*): PrivateScope, Public, HideBySig
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class KClmtrBase.KClmtrWrapper.wMatrixFloat: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(UInt32, UInt32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(KClmtrBase.KClmtrNative.Matrix<float>*): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Single Item [Int32, Int32] 'get set' : 
    Single[,] v 'get set' : 
    UInt32 Column 'get ' : 
    UInt32 Row 'get ' : 
  Methods:
    get_Row(): PrivateScope, Public, HideBySig, SpecialName
    get_Column(): PrivateScope, Public, HideBySig, SpecialName
    get_v(): PrivateScope, Public, HideBySig, SpecialName
    set_v(Single[,]): PrivateScope, Public, HideBySig, SpecialName
    get_Item(Int32, Int32): PrivateScope, Public, HideBySig, SpecialName
    set_Item(Int32, Int32, Single): PrivateScope, Public, HideBySig, SpecialName
    initializeV(UInt32, UInt32): PrivateScope, Public, HideBySig
    getNative(Matrix<float>*): PrivateScope, Public, HideBySig
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class KClmtrBase.KClmtrWrapper.wMatrixInt: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(UInt32, UInt32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(KClmtrBase.KClmtrNative.Matrix<int>*): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Int32 Item [Int32, Int32] 'get set' : 
    Int32[,] v 'get set' : 
    UInt32 Column 'get ' : 
    UInt32 Row 'get ' : 
  Methods:
    get_Row(): PrivateScope, Public, HideBySig, SpecialName
    get_Column(): PrivateScope, Public, HideBySig, SpecialName
    get_v(): PrivateScope, Public, HideBySig, SpecialName
    set_v(Int32[,]): PrivateScope, Public, HideBySig, SpecialName
    get_Item(Int32, Int32): PrivateScope, Public, HideBySig, SpecialName
    set_Item(Int32, Int32, Int32): PrivateScope, Public, HideBySig, SpecialName
    initializeV(UInt32, UInt32): PrivateScope, Public, HideBySig
    getNative(Matrix<int>*): PrivateScope, Public, HideBySig
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class KClmtrBase.KClmtrWrapper.wGamutSpec: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(Double, Double, Double, Double, Double, Double, Double, Double, Double): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(KClmtrBase.KClmtrNative.GamutSpec*): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Methods:
    fromCode(GamutCode, Double): PrivateScope, Public, Static, HideBySig
    fromCode(GamutCode): PrivateScope, Public, Static, HideBySig
    getCodeSpec(): PrivateScope, Public, HideBySig
    setRed(Double, Double): PrivateScope, Public, HideBySig
    setGreen(Double, Double): PrivateScope, Public, HideBySig
    setBlue(Double, Double): PrivateScope, Public, HideBySig
    setWhite(Double, Double, Double): PrivateScope, Public, HideBySig
    getWhite(Double* IsImplicitlyDereferenced, Double* IsImplicitlyDereferenced, Double* IsImplicitlyDereferenced): PrivateScope, Public, HideBySig
    getRed(Double* IsImplicitlyDereferenced, Double* IsImplicitlyDereferenced, Double* IsImplicitlyDereferenced): PrivateScope, Public, HideBySig
    getGreen(Double* IsImplicitlyDereferenced, Double* IsImplicitlyDereferenced, Double* IsImplicitlyDereferenced): PrivateScope, Public, HideBySig
    getBlue(Double* IsImplicitlyDereferenced, Double* IsImplicitlyDereferenced, Double* IsImplicitlyDereferenced): PrivateScope, Public, HideBySig
    getRGBtoXYZ(): PrivateScope, Public, HideBySig
    getXYZtoRGB(): PrivateScope, Public, HideBySig
    getNative(GamutSpec*): PrivateScope, Public, HideBySig
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class KClmtrBase.KClmtrWrapper.wMeasurement: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(KClmtrBase.KClmtrWrapper.wMeasurement): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(KClmtrBase.KClmtrNative.Measurement*): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    KClmtrBase.KClmtrWrapper.wGamutSpec GamutSpec 'get set' : 
    Double MaxZ 'get ' : 
    Double MinZ 'get ' : 
    Double MaxY 'get ' : 
    Double MinY 'get ' : 
    Double MaxX 'get ' : 
    Double MinX 'get ' : 
    Int32 Averagingby 'get ' : 
    UInt32 errorcode 'get ' : 
    Double ColorTemputure_duv 'get ' : 
    Double ColorTemputure_K 'get ' : 
    KClmtrBase.MeasurementRange BlueRange 'get ' : 
    KClmtrBase.MeasurementRange GreenRange 'get ' : 
    KClmtrBase.MeasurementRange RedRange 'get ' : 
    Double value 'get ' : 
    Double saturation 'get ' : 
    Double hue 'get ' : 
    Double LCh_h 'get ' : 
    Double LCh_C 'get ' : 
    Double LAB_b 'get ' : 
    Double Lab_a 'get ' : 
    Double Lab_L 'get ' : 
    Double Wavelength_duv 'get ' : 
    Double Wavelength_nm 'get ' : 
    Double CIE1974_v 'get ' : 
    Double CIE1974_u 'get ' : 
    Double RGB_Blue 'get ' : 
    Double RGB_Green 'get ' : 
    Double RGB_Red 'get ' : 
    Double BigZRaw 'get ' : 
    Double BigYRaw 'get ' : 
    Double BigXRaw 'get ' : 
    Double BigZ 'get ' : 
    Double BigY 'get ' : 
    Double BigX 'get ' : 
    Double CIE1931_y 'get ' : 
    Double CIE1931_x 'get ' : 
  Methods:
    get_CIE1931_x(): PrivateScope, Public, HideBySig, SpecialName
    get_CIE1931_y(): PrivateScope, Public, HideBySig, SpecialName
    get_BigX(): PrivateScope, Public, HideBySig, SpecialName
    get_BigY(): PrivateScope, Public, HideBySig, SpecialName
    get_BigZ(): PrivateScope, Public, HideBySig, SpecialName
    get_BigXRaw(): PrivateScope, Public, HideBySig, SpecialName
    get_BigYRaw(): PrivateScope, Public, HideBySig, SpecialName
    get_BigZRaw(): PrivateScope, Public, HideBySig, SpecialName
    get_RGB_Red(): PrivateScope, Public, HideBySig, SpecialName
    get_RGB_Green(): PrivateScope, Public, HideBySig, SpecialName
    get_RGB_Blue(): PrivateScope, Public, HideBySig, SpecialName
    get_CIE1974_u(): PrivateScope, Public, HideBySig, SpecialName
    get_CIE1974_v(): PrivateScope, Public, HideBySig, SpecialName
    get_Wavelength_nm(): PrivateScope, Public, HideBySig, SpecialName
    get_Wavelength_duv(): PrivateScope, Public, HideBySig, SpecialName
    get_Lab_L(): PrivateScope, Public, HideBySig, SpecialName
    get_Lab_a(): PrivateScope, Public, HideBySig, SpecialName
    get_LAB_b(): PrivateScope, Public, HideBySig, SpecialName
    get_LCh_C(): PrivateScope, Public, HideBySig, SpecialName
    get_LCh_h(): PrivateScope, Public, HideBySig, SpecialName
    get_hue(): PrivateScope, Public, HideBySig, SpecialName
    get_saturation(): PrivateScope, Public, HideBySig, SpecialName
    get_value(): PrivateScope, Public, HideBySig, SpecialName
    get_RedRange(): PrivateScope, Public, HideBySig, SpecialName
    get_GreenRange(): PrivateScope, Public, HideBySig, SpecialName
    get_BlueRange(): PrivateScope, Public, HideBySig, SpecialName
    get_ColorTemputure_K(): PrivateScope, Public, HideBySig, SpecialName
    get_ColorTemputure_duv(): PrivateScope, Public, HideBySig, SpecialName
    get_errorcode(): PrivateScope, Public, HideBySig, SpecialName
    get_Averagingby(): PrivateScope, Public, HideBySig, SpecialName
    get_MinX(): PrivateScope, Public, HideBySig, SpecialName
    get_MaxX(): PrivateScope, Public, HideBySig, SpecialName
    get_MinY(): PrivateScope, Public, HideBySig, SpecialName
    get_MaxY(): PrivateScope, Public, HideBySig, SpecialName
    get_MinZ(): PrivateScope, Public, HideBySig, SpecialName
    get_MaxZ(): PrivateScope, Public, HideBySig, SpecialName
    get_GamutSpec(): PrivateScope, Public, HideBySig, SpecialName
    set_GamutSpec(wGamutSpec): PrivateScope, Public, HideBySig, SpecialName
    op_Assign(wMeasurement IsImplicitlyDereferenced IsConst): PrivateScope, Public, HideBySig, SpecialName
    fromXYZ(Double, Double, Double, wGamutSpec): PrivateScope, Public, Static, HideBySig
    fromXYZ(Double, Double, Double): PrivateScope, Public, Static, HideBySig
    fromxyY(Double, Double, Double, wGamutSpec): PrivateScope, Public, Static, HideBySig
    fromxyY(Double, Double, Double): PrivateScope, Public, Static, HideBySig
    fromuvprimeY(Double, Double, Double, wGamutSpec): PrivateScope, Public, Static, HideBySig
    fromuvprimeY(Double, Double, Double): PrivateScope, Public, Static, HideBySig
    fromTempduvY(Double, Double, Double, wGamutSpec): PrivateScope, Public, Static, HideBySig
    fromTempduvY(Double, Double, Double): PrivateScope, Public, Static, HideBySig
    fromnmduvY(Double, Double, Double, wGamutSpec): PrivateScope, Public, Static, HideBySig
    fromnmduvY(Double, Double, Double): PrivateScope, Public, Static, HideBySig
    fromRGB(Double, Double, Double, wGamutSpec): PrivateScope, Public, Static, HideBySig
    fromRGB(Double, Double, Double): PrivateScope, Public, Static, HideBySig
    fromHSV(Double, Double, Double, wGamutSpec): PrivateScope, Public, Static, HideBySig
    fromLab(Double, Double, Double, wGamutSpec): PrivateScope, Public, Static, HideBySig
    deltaE1976(wMeasurement): PrivateScope, Public, HideBySig
    deltaE1994(wMeasurement): PrivateScope, Public, HideBySig
    deltaE2000(wMeasurement): PrivateScope, Public, HideBySig
    toNits(Double): PrivateScope, Public, Static, HideBySig
    toFootLamberts(Double): PrivateScope, Public, Static, HideBySig
    getNative(Measurement*): PrivateScope, Public, HideBySig
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class KClmtrBase.KClmtrWrapper.wFlickerSetting: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(KClmtrBase.KClmtrNative.FlickerSetting*): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Fields:
    Int32 samples : Public
    Int32 speed : Public
    Int32 numberOfPeaks : Public
    Boolean cosine : Public
    Boolean smoothing : Public
    Boolean JETIADiscount_DB : Public
    Boolean JEITADiscount_Percent : Public
    KClmtrBase.DecibelMode decibel : Public
    KClmtrBase.PercentMode percent : Public
    wRangeCorrecionArray[] corrections : Public
  Methods:
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class KClmtrBase.KClmtrWrapper.wFlickerSetting+wRange: AutoLayout, AnsiClass, Class, NestedPublic, BeforeFieldInit
    Void .ctor(Range*): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Int32, Int32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Int32 end  'get set' : 
    Int32 start 'get set' : 
  Methods:
    get_start(): PrivateScope, Public, HideBySig, SpecialName
    set_start(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_end(): PrivateScope, Public, HideBySig, SpecialName
    set_end(Int32): PrivateScope, Public, HideBySig, SpecialName
    numbers(): PrivateScope, Public, HideBySig
    getNative(Range*): PrivateScope, Public, HideBySig
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class KClmtrBase.KClmtrWrapper.wFlickerSetting+wRangeCorrecionArray: AutoLayout, AnsiClass, Class, NestedPublic, BeforeFieldInit
    Void .ctor(RangeCorrecionArray*): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Double[] array 'get set' : 
    KClmtrBase.CorrectionMode mode 'get set' : 
    wRange rangeOfHz 'get set' : 
  Methods:
    get_rangeOfHz(): PrivateScope, Public, HideBySig, SpecialName
    set_rangeOfHz(wRange): PrivateScope, Public, HideBySig, SpecialName
    get_mode(): PrivateScope, Public, HideBySig, SpecialName
    set_mode(CorrectionMode): PrivateScope, Public, HideBySig, SpecialName
    get_array(): PrivateScope, Public, HideBySig, SpecialName
    set_array(Double[]): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class KClmtrBase.KClmtrWrapper.wFlicker: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(KClmtrBase.KClmtrNative.Flicker*): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    KClmtrBase.KClmtrWrapper.wFlickerSetting FlickerSetting 'get ' : 
    UInt32 ErrorCode 'get ' : 
    KClmtrBase.KClmtrWrapper.wMatrixDouble Amplitude 'get ' : 
    KClmtrBase.KClmtrWrapper.wMatrixDouble Nits 'get ' : 
    KClmtrBase.KClmtrWrapper.wMatrixDouble Counts 'get ' : 
    KClmtrBase.KClmtrWrapper.wMatrixDouble FlickerPercent 'get ' : 
    KClmtrBase.KClmtrWrapper.wMatrixDouble FlickerDB 'get ' : 
    KClmtrBase.KClmtrWrapper.wMatrixDouble PeakFrequencyDB 'get ' : 
    KClmtrBase.KClmtrWrapper.wMatrixDouble PeakFrequencyPercent 'get ' : 
    KClmtrBase.MeasurementRange Range 'get ' : 
    Double BigY 'get ' : 
  Methods:
    get_BigY(): PrivateScope, Public, HideBySig, SpecialName
    get_Range(): PrivateScope, Public, HideBySig, SpecialName
    get_PeakFrequencyPercent(): PrivateScope, Public, HideBySig, SpecialName
    get_PeakFrequencyDB(): PrivateScope, Public, HideBySig, SpecialName
    get_FlickerDB(): PrivateScope, Public, HideBySig, SpecialName
    get_FlickerPercent(): PrivateScope, Public, HideBySig, SpecialName
    get_Counts(): PrivateScope, Public, HideBySig, SpecialName
    get_Nits(): PrivateScope, Public, HideBySig, SpecialName
    get_Amplitude(): PrivateScope, Public, HideBySig, SpecialName
    get_ErrorCode(): PrivateScope, Public, HideBySig, SpecialName
    get_FlickerSetting(): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class KClmtrBase.KClmtrWrapper.wCounts: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(KClmtrBase.KClmtrNative.Counts*): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    UInt32 ErrorCode 'get ' : 
    KClmtrBase.KClmtrWrapper.wMatrixInt TheCounts 'get ' : 
    KClmtrBase.MeasurementRange BlueRange 'get ' : 
    KClmtrBase.MeasurementRange GreenRange 'get ' : 
    KClmtrBase.MeasurementRange RedRange 'get ' : 
    Int32 Therm 'get ' : 
    Int32 Th2  'get ' : 
    Int32 Th1  'get ' : 
  Methods:
    get_Th1(): PrivateScope, Public, HideBySig, SpecialName
    get_Th2(): PrivateScope, Public, HideBySig, SpecialName
    get_Therm(): PrivateScope, Public, HideBySig, SpecialName
    get_RedRange(): PrivateScope, Public, HideBySig, SpecialName
    get_GreenRange(): PrivateScope, Public, HideBySig, SpecialName
    get_BlueRange(): PrivateScope, Public, HideBySig, SpecialName
    get_TheCounts(): PrivateScope, Public, HideBySig, SpecialName
    get_ErrorCode(): PrivateScope, Public, HideBySig, SpecialName
    getNative(Counts*): PrivateScope, Public, HideBySig
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class KClmtrBase.KClmtrWrapper.wWRGB: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(KClmtrBase.KClmtrNative.WRGB*): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Double[,] v 'get set' : 
  Methods:
    getNative(WRGB*): PrivateScope, Public, HideBySig
    get_v(): PrivateScope, Public, HideBySig, SpecialName
    set_v(Double[,]): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class KClmtrBase.KClmtrWrapper.wBlackMatrix: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(KClmtrBase.KClmtrNative.BlackMatrix*): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Double[,] Range 'get set' : 
    Int32 ErrorCode 'get set' : 
    Double Therm 'get set' : 
  Methods:
    get_Therm(): PrivateScope, Public, HideBySig, SpecialName
    set_Therm(Double): PrivateScope, Public, HideBySig, SpecialName
    get_ErrorCode(): PrivateScope, Public, HideBySig, SpecialName
    set_ErrorCode(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_Range(): PrivateScope, Public, HideBySig, SpecialName
    set_Range(Double[,]): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class KClmtrBase.KClmtrWrapper.wCorrectedCoefficient: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(KClmtrBase.KClmtrNative.CorrectedCoefficient*): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    KClmtrBase.KClmtrWrapper.wMatrixDouble RGBMatrix 'get set' : 
    KClmtrBase.KClmtrWrapper.wMatrixDouble ColorMatrix 'get set' : 
  Methods:
    get_ColorMatrix(): PrivateScope, Public, HideBySig, SpecialName
    set_ColorMatrix(wMatrixDouble): PrivateScope, Public, HideBySig, SpecialName
    get_RGBMatrix(): PrivateScope, Public, HideBySig, SpecialName
    set_RGBMatrix(wMatrixDouble): PrivateScope, Public, HideBySig, SpecialName
    getNative(CorrectedCoefficient*): PrivateScope, Public, HideBySig
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class KClmtrBase.KClmtrWrapper.MeasureEventArgs: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :System.EventArgs
    Void .ctor(KClmtrBase.KClmtrWrapper.wMeasurement): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    KClmtrBase.KClmtrWrapper.wMeasurement Measurement 'get ' : 
  Methods:
    get_Measurement(): PrivateScope, Public, HideBySig, SpecialName
Class KClmtrBase.KClmtrWrapper.FlickerEventArgs: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :System.EventArgs
    Void .ctor(KClmtrBase.KClmtrWrapper.wFlicker): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    KClmtrBase.KClmtrWrapper.wFlicker Flicker 'get ' : 
  Methods:
    get_Flicker(): PrivateScope, Public, HideBySig, SpecialName
Class KClmtrBase.KClmtrWrapper.CountsEventArgs: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :System.EventArgs
    Void .ctor(KClmtrBase.KClmtrWrapper.wCounts): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    KClmtrBase.KClmtrWrapper.wCounts Counts 'get ' : 
  Methods:
    get_Counts(): PrivateScope, Public, HideBySig, SpecialName
Class KClmtrBase.KClmtrWrapper.KClmtrWrap: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Boolean isMeasureCounts 'get ' : 
    KClmtrBase.SpeedMode MeasureSpeedMode 'get set' : 
    Boolean isMeasure 'get ' : 
    Int32 MaxAverageCount 'get set' : 
    Int32 FFT_numberOfPeaks 'get set' : 
    Boolean isFlickering 'get ' : 
    KClmtrBase.DecibelMode FFT_DBMode 'get set' : 
    KClmtrBase.PercentMode FFT_PercentMode 'get set' : 
    Boolean FFT_PercentJEITA_Discount 'get set' : 
    Boolean FFT_DBJEITA_Discount 'get set' : 
    Int32 FFT_samples 'get set' : 
    Boolean FFT_Smoothing 'get set' : 
    Boolean FFT_Cosine 'get set' : 
    System.String[] CalFileList 'get ' : 
    KClmtrBase.KClmtrWrapper.wGamutSpec GamutSpec 'get set' : 
    KClmtrBase.KClmtrWrapper.wMatrixDouble RGBMatrix 'get ' : 
    KClmtrBase.KClmtrWrapper.wMatrixDouble CalMatrix 'get ' : 
    Int32 CalFileID 'get set' : 
    System.String CalFileName 'get ' : 
    Boolean ZeroNoise 'get set' : 
    Boolean isPortOpen 'get ' : 
    Int32 Range 'get set' : 
    Boolean AimingLights 'set' : 
    System.String Model 'get ' : 
    System.String SerialNumber 'get ' : 
    Int32 port 'get set' : 
  Events:
    System.EventHandler`1[KClmtrBase.KClmtrWrapper.CountsEventArgs] CountsEvent: SpecialName
    System.EventHandler`1[KClmtrBase.KClmtrWrapper.FlickerEventArgs] flickerEvent: SpecialName
    System.EventHandler`1[KClmtrBase.KClmtrWrapper.MeasureEventArgs] measureEvent: SpecialName
  Methods:
    get_port(): PrivateScope, Public, HideBySig, SpecialName
    set_port(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_SerialNumber(): PrivateScope, Public, HideBySig, SpecialName
    get_Model(): PrivateScope, Public, HideBySig, SpecialName
    set_AimingLights(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    set_Range(Int32 IsConst): PrivateScope, Public, HideBySig, SpecialName
    get_Range(): PrivateScope, Public, HideBySig, SpecialName
    get_isPortOpen(): PrivateScope, Public, HideBySig, SpecialName
    set_ZeroNoise(Boolean(HasFieldMarshal) IsConst): PrivateScope, Public, HideBySig, SpecialName
    get_ZeroNoise(): PrivateScope, Public, HideBySig, SpecialName
    get_CalFileName(): PrivateScope, Public, HideBySig, SpecialName
    get_CalFileID(): PrivateScope, Public, HideBySig, SpecialName
    set_CalFileID(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_CalMatrix(): PrivateScope, Public, HideBySig, SpecialName
    get_RGBMatrix(): PrivateScope, Public, HideBySig, SpecialName
    get_GamutSpec(): PrivateScope, Public, HideBySig, SpecialName
    set_GamutSpec(wGamutSpec): PrivateScope, Public, HideBySig, SpecialName
    get_CalFileList(): PrivateScope, Public, HideBySig, SpecialName
    setTempCalFile(wCorrectedCoefficient): PrivateScope, Public, HideBySig
    get_FFT_Cosine(): PrivateScope, Public, HideBySig, SpecialName
    set_FFT_Cosine(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_FFT_Smoothing(): PrivateScope, Public, HideBySig, SpecialName
    set_FFT_Smoothing(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_FFT_samples(): PrivateScope, Public, HideBySig, SpecialName
    set_FFT_samples(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_FFT_DBJEITA_Discount(): PrivateScope, Public, HideBySig, SpecialName
    set_FFT_DBJEITA_Discount(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_FFT_PercentJEITA_Discount(): PrivateScope, Public, HideBySig, SpecialName
    set_FFT_PercentJEITA_Discount(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_FFT_PercentMode(): PrivateScope, Public, HideBySig, SpecialName
    set_FFT_PercentMode(PercentMode): PrivateScope, Public, HideBySig, SpecialName
    get_FFT_DBMode(): PrivateScope, Public, HideBySig, SpecialName
    set_FFT_DBMode(DecibelMode): PrivateScope, Public, HideBySig, SpecialName
    get_isFlickering(): PrivateScope, Public, HideBySig, SpecialName
    get_FFT_numberOfPeaks(): PrivateScope, Public, HideBySig, SpecialName
    set_FFT_numberOfPeaks(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_MaxAverageCount(): PrivateScope, Public, HideBySig, SpecialName
    set_MaxAverageCount(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_isMeasure(): PrivateScope, Public, HideBySig, SpecialName
    get_MeasureSpeedMode(): PrivateScope, Public, HideBySig, SpecialName
    set_MeasureSpeedMode(SpeedMode): PrivateScope, Public, HideBySig, SpecialName
    startMeasuring(): PrivateScope, Public, HideBySig
    stopMeasuring(): PrivateScope, Public, HideBySig
    getMeasreument(wMeasurement&(Out)): PrivateScope, Public, HideBySig
    getNextMeasurement(Int32): PrivateScope, Public, HideBySig
    get_isMeasureCounts(): PrivateScope, Public, HideBySig, SpecialName
    startMeasureCounts(): PrivateScope, Public, HideBySig
    stopMeasureCounts(): PrivateScope, Public, HideBySig
    getMeasureCounts(wCounts&(Out)): PrivateScope, Public, HideBySig
    getNextMeasureCount(): PrivateScope, Public, HideBySig
    getCoefficientTestMatrix(wWRGB, wWRGB): PrivateScope, Public, HideBySig
    deleteCalFile(Int32): PrivateScope, Public, HideBySig
    storeMatrices(Int32, String, wMatrixDouble): PrivateScope, Public, HideBySig
    storeMatrices(Int32, String, wCorrectedCoefficient): PrivateScope, Public, HideBySig
    storeMatrices(Int32, String, wWRGB, wWRGB): PrivateScope, Public, HideBySig
    captureBlackLevel(): PrivateScope, Public, HideBySig
    getFlashMatrix(): PrivateScope, Public, HideBySig
    getRAMMatrix(): PrivateScope, Public, HideBySig
    getCoefficientMatrix(): PrivateScope, Public, HideBySig
    startFlicker(): PrivateScope, Public, HideBySig
    getFlicker(wFlicker&(Out)): PrivateScope, Public, HideBySig
    getNextFlicker(): PrivateScope, Public, HideBySig
    stopFlicker(): PrivateScope, Public, HideBySig
    connect(): PrivateScope, Public, HideBySig
    connect(Int32): PrivateScope, Public, HideBySig
    closePort(): PrivateScope, Public, HideBySig
    add_measureEvent(EventHandler`1): PrivateScope, Public, HideBySig, SpecialName
    remove_measureEvent(EventHandler`1): PrivateScope, Public, HideBySig, SpecialName
    add_flickerEvent(EventHandler`1): PrivateScope, Public, HideBySig, SpecialName
    remove_flickerEvent(EventHandler`1): PrivateScope, Public, HideBySig, SpecialName
    add_CountsEvent(EventHandler`1): PrivateScope, Public, HideBySig, SpecialName
    remove_CountsEvent(EventHandler`1): PrivateScope, Public, HideBySig, SpecialName
    testConnection(Int32, String&(Out), String&(Out)): PrivateScope, Public, Static, HideBySig
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
